/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package _/C_/src/powerchat/libclient */


#line 1 "cgo-builtin-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

typedef struct { const char *p; ptrdiff_t n; } _GoString_;

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "exports.go"


#include "glib.h"

struct NUParam {
	GString* Name;
	int Sex;
	int Birth;
	GString* Desc;
	GString* Pwd;
};
struct UserData{
	gint64 Id;
	char* Name;
	int Sex;
	int Age;
	char* Desc;
};

//AppendFriendFn(id,name,sex,age,desc,msg,msg_time)
typedef void (*AppendUserFn)(gint64,char*,int,int,char*,char*,char*);
static void callAppendUser(void *f,gint64 id,char *name,int sex,int age,char *desc,char *msg,char *msg_time){
	AppendUserFn fn = (AppendUserFn)f;
	fn(id,name,sex,age,desc,msg,msg_time);
}
//NotifyFn(Cmd,From,To,Msg)
typedef void (*NotifyFn)(char,gint64,gint64,char*);
static void callNotify(void *f,char Cmd,gint64 From,gint64 To,char* Msg){
	NotifyFn fn = (NotifyFn)f;
	fn(Cmd,From,To,Msg);
}
static gint64 Get(gint64 *v,int i){
	return v[i];
}
static GString* GStr(char *v){
	return g_string_new(v);
}
static struct UserData *NewUserData(gint64 id,char *name,int sex,int age,char *desc){
	struct UserData *v = g_new(struct UserData,1);
	v->Id = id;
	v->Name = name;
	v->Sex = sex;
	v->Age = age;
	v->Desc = desc;
	return v;
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt32 GoInt;
typedef GoUint32 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_32_bit_pointer_matching_GoInt[sizeof(void*)==32/8 ? 1:-1];

typedef _GoString_ GoString;
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


extern void Client_SetHttpId(gint64 p0);

extern int Client_NewUser(struct NUParam* p0);

//NewPasswd params Name,OldMd5-login中的算法,NewMd5-NewUser的算法

extern int Client_NewPasswd(char* p0, char* p1, char* p2);

extern struct UserData* Client_Login(char* p0, char* p1);

extern void Client_GetFriends(void* p0);

extern int Client_UserStatus(gint64 p0);

extern void Client_QueryID(gint64 p0, char* p1, void* p2);

extern void Client_MoveStrangerToFriend(gint64 p0);

extern void Client_GetStrangerMsgs(void* p0);

extern void Client_SearchPersons(char* p0, void* p1);

extern void Client_ChatTo(gint64 p0, char* p1);

extern void Client_Tell(gint64 p0);

extern void Client_TellAll(gint64* p0, int p1);

extern void Client_MultiSend(char* p0, gint64* p1, int p2);

extern void Client_Ping();

extern void Client_HttpConnect(gint64 p0);

extern void Client_ProxyPort(int p0);

extern void Client_SetNotifyFn(void* p0);

extern void Client_SendFile(gint64 p0, char* p1);

extern void Client_AddFriend(gint64 p0);

extern void Client_RemoveFriend(gint64 p0);

extern int Client_GetProxyPort();

extern void Client_Quit();

extern char* Client_GetHost();

extern void Client_OpenPath(char* p0);

extern void Client_UpdateDesc(char* p0);

//rpc service block
//DeleteMe param=[]string{name,pwd}

extern int Client_DeleteMe(char* p0, char* p1);

extern char* Client_GetPgPath();

#ifdef __cplusplus
}
#endif
